// Script de pruebas para la API de productos
// Ejecutar con: node test-products-api.js

const API_BASE = 'http://localhost:8080';

// Funci√≥n para hacer peticiones HTTP
async function makeRequest(url, options = {}) {
    try {
        const response = await fetch(url, {
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            },
            ...options
        });
        
        const data = await response.json();
        return { status: response.status, data };
    } catch (error) {
        return { error: error.message };
    }
}

// Test 1: Verificar estado del servicio de productos
async function testProductServiceStatus() {
    console.log('üîç Verificando estado del servicio de productos...');
    
    const result = await makeRequest(`${API_BASE}/api/products/status`);
    
    console.log('Status:', result.status);
    console.log('Response:', result.data);
    
    if (result.status === 200) {
        console.log('‚úÖ Servicio de productos funcionando');
    } else {
        console.log('‚ùå Error en el servicio de productos');
    }
}

// Test 2: Obtener todos los productos
async function testGetAllProducts() {
    console.log('\nüì¶ Obteniendo todos los productos...');
    
    const result = await makeRequest(`${API_BASE}/api/products`);
    
    console.log('Status:', result.status);
    console.log('Response:', result.data);
    
    if (result.status === 200 && result.data && result.data.success) {
        console.log(`‚úÖ Productos obtenidos: ${result.data.products ? result.data.products.length : 0} productos`);
        if (result.data.products && result.data.products.length > 0) {
            console.log('Primer producto:', result.data.products[0]);
        }
    } else {
        console.log('‚ùå Error obteniendo productos');
    }
}

// Test 3: Obtener productos por ID de categor√≠a
async function testGetProductsByCategoryId() {
    console.log('\nüè∑Ô∏è Obteniendo productos por ID de categor√≠a (ID: 1)...');
    
    const result = await makeRequest(`${API_BASE}/api/products/category/1`);
    
    console.log('Status:', result.status);
    console.log('Response:', result.data);
    
    if (result.status === 200 && result.data && result.data.success) {
        console.log(`‚úÖ Productos por categor√≠a obtenidos: ${result.data.products ? result.data.products.length : 0} productos`);
        if (result.data.products && result.data.products.length > 0) {
            console.log('Primer producto de la categor√≠a:', result.data.products[0]);
        }
    } else {
        console.log('‚ùå Error obteniendo productos por categor√≠a');
    }
}

// Test 4: Obtener productos por nombre de categor√≠a
async function testGetProductsByCategoryName() {
    console.log('\nüè∑Ô∏è Obteniendo productos por nombre de categor√≠a (Electrodom√©sticos)...');
    
    const result = await makeRequest(`${API_BASE}/api/products/category/name/Electrodom√©sticos`);
    
    console.log('Status:', result.status);
    console.log('Response:', result.data);
    
    if (result.status === 200 && result.data && result.data.success) {
        console.log(`‚úÖ Productos por nombre de categor√≠a obtenidos: ${result.data.products ? result.data.products.length : 0} productos`);
        if (result.data.products && result.data.products.length > 0) {
            console.log('Primer producto de la categor√≠a:', result.data.products[0]);
        }
    } else {
        console.log('‚ùå Error obteniendo productos por nombre de categor√≠a');
    }
}

// Test 5: Probar con categor√≠a inexistente
async function testGetProductsByNonExistentCategory() {
    console.log('\nüö´ Probando con categor√≠a inexistente...');
    
    const result = await makeRequest(`${API_BASE}/api/products/category/name/CategoriaInexistente`);
    
    console.log('Status:', result.status);
    console.log('Response:', result.data);
    
    if (result.status === 500 && result.data && !result.data.success) {
        console.log('‚úÖ Correctamente maneja categor√≠a inexistente');
    } else {
        console.log('‚ùå No maneja correctamente categor√≠a inexistente');
    }
}

// Ejecutar todas las pruebas
async function runAllTests() {
    console.log('üöÄ Iniciando pruebas de la API de productos\n');
    
    await testProductServiceStatus();
    await testGetAllProducts();
    await testGetProductsByCategoryId();
    await testGetProductsByCategoryName();
    await testGetProductsByNonExistentCategory();
    
    console.log('\n‚ú® Pruebas de productos completadas');
}

// Ejecutar si es llamado directamente
if (typeof window === 'undefined') {
    // Node.js
    const fetch = require('node-fetch');
    runAllTests();
} else {
    // Browser - exponer funciones globalmente
    window.testProductsAPI = {
        runAllTests,
        testProductServiceStatus,
        testGetAllProducts,
        testGetProductsByCategoryId,
        testGetProductsByCategoryName,
        testGetProductsByNonExistentCategory
    };
}
