spring.application.name=petstore-feature5-backend

# definir el perfil activo (descomentar para usar siempre dev)
# spring.profiles.active=dev


# DataSource (lee las env vars definidas en .env o en el entorno)
spring.datasource.url=jdbc:postgresql://${DB_HOST_PROD}:${DB_PORT_PROD}/${DB_NAME_PROD}?sslmode=${DB_SSLMODE_PROD}
spring.datasource.username=${DB_USER_PROD}
spring.datasource.password=${DB_PASSWORD_PROD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA config
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect



# HikariCP Connection Pool Optimization - MINIMAL SETTINGS
#   spring.datasource.hikari.minimum-idle=0
#   spring.datasource.hikari.maximum-pool-size=1
#   spring.datasource.hikari.idle-timeout=180000
#   spring.datasource.hikari.max-lifetime=300000
#   spring.datasource.hikari.connection-timeout=10000
#   spring.datasource.hikari.validation-timeout=3000
#   spring.datasource.hikari.leak-detection-threshold=30000
#   spring.datasource.hikari.connection-test-query=SELECT 1

# Flyway (deshabilitado hasta que tengas migraciones)
spring.flyway.enabled=false
spring.flyway.locations=classpath:db/migration

# GraphQL Configuration
spring.graphql.graphiql.enabled=true
spring.graphql.graphiql.path=/graphiql
spring.graphql.websocket.path=/graphql
spring.graphql.schema.locations=classpath:graphql/
spring.graphql.schema.file-extensions=.graphqls,.gql
spring.graphql.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001,http://localhost:5173}
spring.graphql.cors.allow-credentials=true

# Actuator (opcional)
management.endpoints.web.exposure.include=health,info,metrics,prometheus

# Configuración de Tomcat para mejor manejo de conexiones
# server.tomcat.connection-timeout=20000
# server.tomcat.max-connections=8192
# server.tomcat.accept-count=100
#server.tomcat.max-http-form-post-size=2MB

# para cargar variables de entorno desde un archivo .env
spring.config.import=optional:file:.env[.properties]

# CORS Configuration
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001,http://localhost:5173,http://127.0.0.1:5500,http://localhost:5500,file://}
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=*
app.cors.allow-credentials=true
app.cors.max-age=3600

# Security whitelist endpoints
app.security.whitelist=/api/auth/**,/graphql,/graphiql,/actuator/health,/actuator/info,/h2-console/**,/test,/graphql-test,/api/products/**

spring.output.ansi.enabled=ALWAYS

# Logging Configuration
logging.level.org.springframework=INFO
logging.level.com.petstore.backend=DEBUG
logging.level.root=INFO

# Debug temporal para Spring Security
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

# Reducir ruido de Tomcat y HikariCP
logging.level.org.apache.coyote.http11.Http11Processor=WARN
logging.level.org.apache.tomcat=WARN
logging.level.com.zaxxer.hikari=INFO
logging.level.com.zaxxer.hikari.pool.HikariPool=WARN

# Logging específico para desarrollo
logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx